<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Free Play]]></title>
  <link href="http://jrowdev.com/atom.xml" rel="self"/>
  <link href="http://jrowdev.com/"/>
  <updated>2012-11-30T11:46:36-05:00</updated>
  <id>http://jrowdev.com/</id>
  <author>
    <name><![CDATA[Josh Rowley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Make Conditional Requests to Github's API using Octokit]]></title>
    <link href="http://jrowdev.com/blog/2012/11/30/how-to-make-conditional-requests-to-githubs-api-using-octokit/"/>
    <updated>2012-11-30T01:25:00-05:00</updated>
    <id>http://jrowdev.com/blog/2012/11/30/how-to-make-conditional-requests-to-githubs-api-using-octokit</id>
    <content type="html"><![CDATA[<p>For the last month, my team and I have been working on Gitbo, an app for finding open source software issues on Github and providing incentives for improvement by having users issue monetary bounties for solutions.</p>

<p>One of the challenges that we had to overcome was managing our calls to the Github API. Github&#8217;s starting limit on API requests for developers is 5000 per hour. Gitbo needs to pull all sorts of data from Github&#8217;s API about developer&#8217;s repositories, their related issues and comments, as well as user details.</p>

<p>Furthermore, we wanted to keep repository and issue information as fresh as we could in Gitbo. This required frequent calls to the Github API for every record in our database containing information from Github. It wasn&#8217;t long before we started hitting the limit, which became a huge roadblock in development as well as a large red flag of future scalability problems for our app in production.</p>

<p>The Github API documentation outlines how to make <a href="" title="http://developer.github.com/v3/#conditional-requests">conditional requests</a> by adding an <code>If-Modified-Since</code> header to the HTTP request to the API which will return a <code>304 Not Modified</code> HTTP response if the resource hasn&#8217;t been modified since that time. This was a great solution for our problem because any <code>304</code> responses from Github do not count against our rate limit. If the API resource has been modified since the time you requested, the API returns the normal JSON response.</p>

<p>The question was how to add this into our app. We had already implemented a fantastic open source API wrapper called <a href="" title="https://github.com/pengwynn/octokit"><code>octokit</code></a>, maintained by <a href="" title="https://twitter.com/pengwynn"><code>pengwynn</code></a> who has been a super helpful resource for our group. My fellow team members <a href="" title="http://students.flatironschool.com/adamjonas">Adam</a> and <a href="" title="http://students.flatironschool.com/kevinmcnamee">Kevin</a> found a <a href="" title="https://github.com/pengwynn/octokit/pull/142">pull request</a> to Octokit from <a href="" title="https://github.com/bratsche"><code>bratsche</code></a> which adds support for making conditional requests. However, Wynn decided not to merge into Octokit, preferring a middleware solution, so they merged the new commits from <a href="" title="https://github.com/bratsche/octokit"><code>bratche/octokit</code></a> into Adam&#8217;s <a href="" title="https://github.com/ajonas04/octokit">fork</a> of <code>octokit</code>.</p>

<p>You can view the additional source code that adds the support in the <a href="" title="https://github.com/ajonas04/octokit/commit/e978e441bdd810ae29754aa44250baec25bfcab0">merge commit</a>.</p>

<p>If you&#8217;d like to make conditional requests in your application using <code>octokit</code> simply add <code>octokit</code> into your <code>Gemfile</code> with Adam&#8217;s repo as the source:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;octokit&#39;</span><span class="p">,</span> <span class="ss">:github</span> <span class="o">=&gt;</span> <span class="s1">&#39;ajonas04/octokit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to <code>bundle install</code> or <code>bundle update</code> depending on whether you already have <code>pengwynn</code>&#8217;s original <code>octokit</code> loaded.</p>

<p>Now with conditional requests, you can add a <code>:since</code> option into all requests to Github that will make the request conditional, returning the full JSON response of the resource if its <code>Last-Modified</code> header in the conditional request&#8217;s response is later than the datetime query string you sent.</p>

<p>In order for it to work, you&#8217;ll need to send the query string to Github in <a href="" title="http://www.csgnetwork.com/timerfc1123calc.html">RFC 1123 Time Format</a>. Luckily, Ruby&#8217;s Time library has a method <code>httpdate</code> which will convert a Ruby Datetime or Time object into a string with this format.</p>

<p>Let&#8217;s see it in action, I&#8217;ll make a conditional request with the current time as the <code>:since</code> parameter. Since the resource will probably not have been modified in the time between the time object&#8217;s creation and when Github receives the request, we&#8217;ll see the benefits for our rate limit:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Octokit</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:login</span> <span class="o">=&gt;</span> <span class="n">username</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">rate_limit_remaining</span>
</span><span class='line'><span class="c1">#=&gt; 5000</span>
</span><span class='line'><span class="n">current_time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">httpdate</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">repositories</span><span class="p">(</span><span class="s2">&quot;joshrowley&quot;</span><span class="p">,</span> <span class="ss">:since</span> <span class="o">=&gt;</span> <span class="n">current_time</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; nil # this nil tells us we received a 304 response</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">rate_limit_remaining</span>
</span><span class='line'><span class="c1">#=&gt; 5000</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get Started Writing Tests with Minitest]]></title>
    <link href="http://jrowdev.com/blog/2012/10/22/testing-with-minitest/"/>
    <updated>2012-10-22T20:24:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/10/22/testing-with-minitest</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jeffwerner/4733627128/" title="Untitled by Jeff_Werner, on Flickr"><img src="http://farm2.staticflickr.com/1239/4733627128_86de4cd1cf.jpg" width="500" height="375" alt="Untitled"></a></p>

<p>Testing let&#8217;s you check on the health of your code, making sure it&#8217;s performing well. Photo by <a href="http://www.flickr.com/photos/48023467@N00/4733627128/" title="Photo by Jeff Werner">Jeff Werner</a></p>

<p>Up until today, all of my project work at Flatiron has been focused on writing application code. Today, I started learning about how to write the companion test suites. It&#8217;s a bit intimidating, so here&#8217;s how to get started.</p>

<h3>Why Testing is Important</h3>

<p>Writing test suites is important because it helps ensure that your program does what you think it does. Your tests define <strong>your expectations</strong> for your program. When you run your test suite, your tests should pass if your program&#8217;s behavior matches these expectations, and fail if the reality is different.</p>

<p>Testing becomes very powerful once you start coding using a test driven development approach. Rather than writing tests for your existing code, you write your tests before anything else. Define the expected behavior in the test, and then write the necessary code to get the test to pass. Once, the test is passing, refactor your code to remove repetition and improve code reability. As you continue to build a large collection of tests, your full test suite should warn you if new code starts to cause bugs somewhere else.  These early warning flags help keep your code stable and minimize bugs.</p>

<h3>What is Minitest?</h3>

<p><a href="http://docs.seattlerb.org/minitest/" title="Minitest">Minitest</a> is a lightweight testing library for Ruby. Minitest used to be a separate gem, but as of Ruby 1.9 it&#8217;s  a part of the standard library that comes with Ruby. Require the library in any Ruby file and it adds all kinds of methods that make writing tests easier.</p>

<h3>How to get started writing tests with Minitest?</h3>

<p>For example, let&#8217;s say I&#8217;m writing a Flashcard class for an application for studying Spanish. Before writing any part of the Flashcard class, I&#8217;ll want to create tests for how I expect the Flashcard class to behave.</p>

<p>I&#8217;ll first create a file for my test suite, <code>test.rb</code>. Within this file, I&#8217;ll want to make sure that the Minitest library is loaded before the tests are run. This is done by requiring the library:</p>

<pre><code>require 'minitest/spec'
require 'minitest/autorun'
</code></pre>

<p>We&#8217;ll also want to load the file that will contain the code we&#8217;re testing. In the same directory, let&#8217;s say <code>flashcard.rb</code> is where I&#8217;m going to start writing the class definition. I&#8217;ll load it in through the require relative method:</p>

<pre><code>require_relative 'flashcard.rb'
</code></pre>

<p>Now, I&#8217;ll write my tests. I should write tests for every expected behavior for the class. How do I write a test?</p>

<pre><code>describe Flashcard do
end
</code></pre>

<p><strong>Step 1:</strong> Use Mintest&#8217;s describe method to create a block where all your tests relating to the Flashcard class will go. All your tests will go between the <code>do</code> and the <code>end</code> keywords.</p></p>

<pre><code>describe Flashcard do
  it "can create an instance of the Flashcard class" do
  end
end
</code></pre>

<p><strong>Step 2:</strong> Use the it method and pass in a string that describes the expected behavior. This will be the text that is printed when the test is failing to help you identify which functionality of your code is not behaving correctly. Be sure to pick a good name.</p>

<pre><code>describe Flashcard do
  it "can create an instance of the Flashcard class" do
    flashcard = Flashcard.new
  end
end
</code></pre>

<p><strong>Step 3:</strong> Set up what needs to be in place before you make an assertion about the test. In this case, I&#8217;m testing whether I can create an instance of the Flashcard class, so I&#8217;ll want to set the stage by creating an instance.</p>

<pre><code>describe Flashcard do
  it "can create an instance of the Flashcard class" do
    flashcard = Flashcard.new
    flashcard.must_be_instance_of Flashcard
  end
end
</code></pre>

<p><strong>Step 4:</strong> Write an assertion about the expected behavior. Minitest has easy to understand methods such as <code>must_be_instance_of</code> that determine whether your test passed (whether the assertion is true), or failed (assertion returned false).</p>

<p>Continue to write out all your expectations, until you have a sizeable list. Here are some example tests, you&#8217;ll probably have more tests than this, but note that there are tests are very basic stuff like whether the class even exists, up to whether the class adds a card into a user&#8217;s favorites.</p>

<pre><code>describe Flashcard do

    it "can create an instance of the Flashcard class" do
      flashcard = Flashcard.new
      flashcard.must_be_instance_of Flashcard
    end

    it "has a word attribute" do
      flashcard = Flashcard.new
      flashcard.word = "hola"
      flashcard.word.must_be == "hola"
    end

    it "should respond to add_to_favorites method" do
      flashcard = Flashcard.new
      flashcard.must_respond_to add_to_favorites
    end

    it "should add favorite cards to a user's favorites" do
      #TODO: write test once I figure out user class spec
    end
end
</code></pre>

<p>I run the tests by running the test file through Terminal: <code>ruby test.rb</code>. This is where a testing tool like Minitest comes in handy. The test file will print to the terminal any errors and whether the code from <code>flashcard.rb</code> passes the test. If it doesn&#8217;t pass, Minitest will print the actual value and the expected value that were inputted into that test&#8217;s assertion. When I run the above test suite, the first error I receive is:</p>

<pre><code>/Users/josh/Desktop/test.rb:6:in &lt;main&gt;': uninitialized constant Flashcard (NameError)`
</code></pre>

<p>My suite describes a class Flashcard, but Ruby can&#8217;t find the class. In accordance with a test driven approach, I now add code into <code>flashcard.rb</code>, but only enough to get rid of that first error. In this case, all I need to do is define the class in <code>flashcard.rb</code>:</p>

<pre><code>class Flashcard
end
</code></pre>

<p>Now if I run <code>test.rb</code> again, I get the following:</p>

<pre><code>Run options: --seed 19557

# Running tests:

.EE.

Finished tests in 0.001041s, 3842.4592 tests/s, 960.6148 assertions/s.

  1) Error:
test_0003_should_respond_to_add_to_favorites_method(Flashcard):
NameError: undefined local variable or method `add_to_favorites' for #&lt;#&lt;Class:0x007f9e8c0c65e8&gt;:0x007f9e8c062a70&gt;
    test.rb:21:in `block (2 levels) in &lt;main&gt;'

  2) Error:
test_0002_has_a_word_attribute(Flashcard):
NoMethodError: undefined method `word=' for #&lt;Flashcard:0x007f9e8c061be8&gt;
    test.rb:15:in `block (2 levels) in &lt;main&gt;'

4 tests, 1 assertions, 0 failures, 2 errors, 0 skips
</code></pre>

<p>As you can see, Minitest creates a nicely formatted results output for you. Your next step is to tackle fixing the next failing test. What&#8217;s great about writing these tests is that it forces you to explicitly define what your application should do before you write the code. Sometimes, writing tests for one class will help you figure out what other classes you need. For example on the last test, I want to add cards to a user&#8217;s favorites. Obviously, I&#8217;ll need to now write tests for a User class, and then also eventually make some design decisions on how cards are added to a user.</p>

<p>Tests make you break the problem down into the smallest possible chunks, keep you focused on one small problem at a time, and help prevent feature creep and getting sidetracked. Plus, there&#8217;s an addictive reward you feel when you get a test to pass, even if it&#8217;s super basic, that&#8217;ll keep you motivated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Fog of Programming]]></title>
    <link href="http://jrowdev.com/blog/2012/10/17/fog-is-starting-to-lift/"/>
    <updated>2012-10-17T19:56:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/10/17/fog-is-starting-to-lift</id>
    <content type="html"><![CDATA[<p>Avi talks about the &#8220;fog of programming&#8221;. There are so many different technologies at play in a web application, it&#8217;s all overwhelming at first. Not only that, but since all the technologies interact with each other, you need to be comfortable with how all of them work.</p>

<p>As a result, new programmers feel like they&#8217;re in a fog cloud, where they kind of understand how things work and interact with each other.</p>

<p>Then one day, you&#8217;ll finally learn something, and you&#8217;ll go back to those fuzzy concepts and suddenly a ray of clarity will strike your mind and things start to come together more.</p>

<p>I&#8217;m really starting to understand classes, and how damn useful they are. I sort of understood them before, but I finally &#8220;saw the light&#8221; once I started connecting the dots between scope, instance variables, and class methods.</p>

<p>A couple days ago, variable scoping really started to click in my head and feel natural and intuitive. Now I see instance variables, instance methods, and class methods in a whole new light.</p>

<p>It&#8217;s quite a rewarding feeling.</p>

<p>Earlier in the semester, I wrote a very simple jukebox example, but have now rewritten it using object oriented code.</p>

<p>Here&#8217;s the original:</p>

<div style="max-width: 600px"><script src="https://gist.github.com/3909117.js?file=jukebox.rb"></script></div>


<p>And here&#8217;s the object oriented version:</p>

<div style="max-width: 600px"><script src="https://gist.github.com/3915908.js?file=oo_jukebox.rb"></script></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breakable Toys: Improve your programming through small, low-stakes projects]]></title>
    <link href="http://jrowdev.com/blog/2012/10/17/breakable-toys-improve-your-programming-through-small-low-stakes-projects/"/>
    <updated>2012-10-17T11:37:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/10/17/breakable-toys-improve-your-programming-through-small-low-stakes-projects</id>
    <content type="html"><![CDATA[<p>I was perusing Speaker Deck and found <a href="https://speakerdeck.com/u/martinisoft/p/breakable-toys">this great deck</a> by <a href="https://twitter.com/martinisoft">Aaron Kalin</a> on learning programming through creating breakable toys.</p>

<p>There are some great suggestions he makes for beginning programmers who are trying to grow. A couple of the points are ones that I hear from <a href="" title="https://twitter.com/aviflombaum">Avi</a> all the time.</p>

<p>What&#8217;s a breakable toy?</p>

<p><script async class="speakerdeck-embed" data-slide="8" data-id="4fa03d2d5f48f700220279a1" data-ratio="1.3333333333333333" src="http://jrowdev.com//speakerdeck.com/assets/embed.js"></script></p>


<p>As a newcomer to the software development field, the principles Aaron mentions are important to keep in mind for any new developer and I see how they relate to my experience:</p>

<ol>
<li><p><strong>&#8220;Go Simple&#8221;</strong><br><br> When given a coding challenge or project to implement, I tend to overthink it, or get too ambitious. I try to design my code to be open for all these awesome features I&#8217;d like to add. I try to implement everything at once, instead of doing small, basic, iterative steps. Also, when thinking of new projects I want to start, I try to think of next Facebook or amazing web app, but in order to grow as a developer I need to think of what small tools I could build that would be a great learning experience.</p></li>
<li><p><strong>&#8220;They don&#8217;t need to be perfect&#8221;</strong><br><br> For a lot of beginners, myself included, there&#8217;s an intense urge to &#8220;get it right&#8221;. There must be a perfect way of doing something. As I&#8217;ve become more immersed in the coding world, I&#8217;ve noticed that this is a destructive instinct. First, there are a million different ways to tackle a problem. Second, I need to being comfortable with sharing imperfect code with others. The worst thing is to work on code in isolation until the day I think it&#8217;s &#8220;perfect&#8221;. That day will most likely never come, and the code you wrote will never be used or shared.</p></li>
<li><p><strong>&#8220;Consider open-sourcing them. It may help someone else learn&#8221;</strong><br><br> Pair programming at Flatiron school has been such a great learning experience. It&#8217;s been extremely beneficial for me to code with another person. Going back to the previous points, even if your program is super simple and imperfect, share it with people! It&#8217;s easy to forget that at one point, a former version of myself wouldn&#8217;t have been able to do it, and would have searched for the answer online.</p></li>
<li><p><strong>&#8220;Re-inventing the wheel is ok&#8221;</strong><br><br> With all the gems available on Ruby, it&#8217;s amazing that I can easily add some amazing functionality to my applications, even without a ton of experience. I now want to try my hand at building my own version of the sqlite3-ruby or nokogiri gems. Even though it&#8217;s not necessary, it gives me projects I can work on, and gain further insight.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Tips for Solo GitHubbers: How to Code with People for the First Time]]></title>
    <link href="http://jrowdev.com/blog/2012/10/09/tips-for-solo-githubbers-how-to-code-with-people-for-the-first-time/"/>
    <updated>2012-10-09T19:43:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/10/09/tips-for-solo-githubbers-how-to-code-with-people-for-the-first-time</id>
    <content type="html"><![CDATA[<p><img src="http://jrowdev.com/images/git_collaboration.jpg" alt="Coding Together" />
Photo by <a href="http://www.flickr.com/photos/hackny/6890140478/">hackNY</a></p>

<p>I used Git collaboratively for the first time exactly one week ago on Day 1 of Flatiron School. It wasn&#8217;t pretty, you can read a little about it in my first post.</p>

<p>I had some experience using Git while doing Michael Hartl&#8217;s Rails Tutorial in my spare time, but I had never used it with other people. Git is very simple when it&#8217;s just you. I was pretty much only doing commits and pushing to the remote, with the occasional branch.</p>

<p>This is one of the biggest limitations facing beginners trying to learn how to become professional developers on their own, whether through books or online resources. You must learn how to use Git with other people! That much is very apparent from my first week at Flatiron. If a coding academy isn&#8217;t an option for you, find a Meetup for beginners. Convince your friends to learn it with you. Find somebody.</p>

<p>Once you got your collaborators, here are some tips I&#8217;d like to share based on my first experience of being a newbie lone wolf Git user being thrown into my first group Git collaboration:</p>

<ol>
<li><p><strong>Establish team&#8217;s workflow process and best practices first.</strong><br><br> It&#8217;s really important that everyone understands conceptually how your repo is organized, and who should be committing where. Do not rush this step! If someone is a little shaky on the foundations, take the time to get them up to speed. Even someone with the best of intentions can cause havoc on the rest of the group&#8217;s work if they misunderstand your group&#8217;s workflow.</p></li>
<li><p><strong>Make sure you&#8217;re working on the correct branch.</strong><br><br> I pulled down the master branch, and created my own feature branch. However, at some point I checked out the master branch and didn&#8217;t notice. I lazily pushed to GitHub without specifying a specific branch (I assumed was in my feature branch), and as a result committed a major party foul by pushing to the master branch. If you&#8217;re making commits on the wrong branch, you&#8217;re setting yourself up for confusion when trying to merge feature branches together, or merging them back to master.</p></li>
<li><p><strong>Do not run any commands if you don&#8217;t understand what it does.</strong><br><br> Not only that, but do you understand its consequences in your specific context? I was super eager to get started with git. I didn&#8217;t remember everything, so I asked my fellow classmates what commands to try when I ran up against a wall. Or, I would try stumbling around with git commands until I got what I wanted. Do not do this! Git is not IRB! You can&#8217;t just play around with it. If you&#8217;re stuck, take as much time as you need to research and figure out what you need to do, or ask someone who would know. Otherwise, you can screw up your repo big time.</p></li>
<li><p><strong>One mistake can proliferate exponentially into a huge mess.</strong><br><br> Unfortunately, my only advice is to try to not make any mistakes, especially when merging, rebasing, pulling, and pushing. Take a moment to step back and doublecheck that you are using the correct command, in the correct branch, to the correct remote. Ask yourself, when I hit enter, what will this do? If you&#8217;re not 100%, don&#8217;t do it.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL: Schemin' with Schemas]]></title>
    <link href="http://jrowdev.com/blog/2012/10/04/sql-schemin-with-schemas/"/>
    <updated>2012-10-04T23:24:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/10/04/sql-schemin-with-schemas</id>
    <content type="html"><![CDATA[<p>Today was spent working on databases. I had a lot of fun writing SQL queries. We were tasked to create the schema for a simple quiz app. Here&#8217;s the schema:</p>

<p><pre style="max-width:500px">

CREATE table user (
    id INTEGER PRIMARY KEY,
    name TEXT
);

CREATE table quiz (
    id INTEGER PRIMARY KEY,
    name
);

CREATE table question (
    id INTEGER PRIMARY KEY,
    content TEXT,
    quiz_id INTEGER
);

CREATE table choice (
    id INTEGER PRIMARY KEY,
    content TEXT,
    correct BOOLEAN,
    question_id INTEGER
);

CREATE table answer (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    question_id INTEGER,
    choice_id INTEGER
);

</pre><p>

With this schema, we had to write some queries and insert sample data. I pair programmed with Matt, and the last challenge was a bit tricky for us, but it was a fun challenge to complete. It feels really good to be learning so much so quickly.

Create a stats.sql that will show the percentage (if you want to try to use MATH functions within SQL) or the total right answers to each question. This will need to use joins too and might get complicated.

<p><pre style="max-width: 500px">

SELECT question.content, (COUNT (*) * 100.0) / (SELECT COUNT (*) FROM answer WHERE question_id = question.id)
FROM question
INNER JOIN choice
ON question.id = choice.question_id
INNER JOIN answer
ON question.id = answer.question_id
WHERE choice.correct = 1 AND
question.id = 1 AND
answer.choice_id = choice.id;

</pre></p>

<p>We then iterate through all the questions replacing the question.id value in the where clause. That outputs the following data with the percentage of responses that were correct:</p>

<p><pre style="max-width:500px">

How do you initialize a Git repository?|100.0
What git command stages changes?|50.0
How do you make a commit once changes are staged?|100.0
What command do you use to see whether there are any untracked files in your repository?|100.0
How do you create a new branch and switch to it with one line?|50.0
How do you create a table in SQL?|100.0
How do you remove a table in SQL?|50.0
How do you write a query that returns all rows from a table?|50.0
What is the difference between an inner join and an outer join?|50.0
How do you add a row to a table?|50.0

</pre></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://jrowdev.com/blog/2012/10/04/hello-world/"/>
    <updated>2012-10-04T12:10:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/10/04/hello-world</id>
    <content type="html"><![CDATA[<p>Hi everyone, my name is Josh Rowley, and I’m a student at the newly created Flatiron School. It’s been two days since we started, and I’ve already felt that I’ve gained more understanding of web development in the past two days then any of the self study I did before I started in the months leading up to it.</p>

<p>The most helpful thing to have in order to learn how to code, at least for me, is to be working with a group with the same goals and mission as yourself. That’s what we have here at the school. It also allows us to work in more realistic environment. The benefits of learning in a team for a beginner cannot be understated. Everyone has different strengths and thought processes, and putting them together helps us solve the challenges of development in faster and newer ways.</p>

<p>Of course, working in the school has also presented its own challenges compared to self study. I thought I knew git pretty well from studying previously and working on my own projects, but I had never actually used it to collaborate on a project with anyone else.</p>

<p>Day one, Avi had us create profile pages for the school website with HTML and CSS. Sounds simple enough, but we were all going to do it at the same time using the same github repo, by forking and creating our own feature branches. At the end, we were going to merge all of our separate work back into the master branch.</p>

<p>We were divided into teams of four, and we started to plan our workflow and collaborate on how the HTML layouts and CSS styling would look like. We thought we had a handle on how git worked, but after a couple of hours, we had way too many branches with common files spread out across our disparate local git repos with different versions across all of them. It was a mess, and we realized that we were a bit ambitious for the first day.</p>

<p>It also showed me that the biggest thing that I’m going to learn here is being able to work as a team on software. Avi emphasized this point several times and it was quite obvious after our first day that that was the case. Being able to communicate and be on the same page for workflow and planning is critical and I’m excited to learn these skills here. It’s definitely something that cannot be learned on your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The problem with Pingdom]]></title>
    <link href="http://jrowdev.com/blog/2012/07/22/the-problem-with-pingdom/"/>
    <updated>2012-07-22T19:13:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/07/22/the-problem-with-pingdom</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>Time to be Awesome - awesome.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Awesome!&quot;</span> <span class="k">unless</span> <span class="n">lame</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.pingdom.com%20Pingdom">The problem with pingdom.</a></p>

<p>My money&#8217;s in that office, right? If she start giving me some bullshit about it ain&#8217;t there, and we got to go someplace else and get it, I&#8217;m gonna shoot you in the head then and there. Then I&#8217;m gonna shoot that bitch in the kneecaps, find out where my goddamn money is. She gonna tell me too. Hey, look at me when I&#8217;m talking to you, motherfucker. You listen: we go in there, and that nigga Winston or anybody else is in there, you the first motherfucker to get shot. You understand?</p>

<blockquote><p>Blockquote is what goes
inside this block here
would you believe that
bullshit?</p></blockquote>

<p>Well, the way they make shows is, they make one show. That show&#8217;s called a pilot. Then they show that show to the people who make shows, and on the strength of that one show they decide if they&#8217;re going to make more shows. Some pilots get picked and become television programs. Some don&#8217;t, become nothing. She starred in one of the ones that became nothing.</p>

<p>The path of the righteous man is beset on all sides by the iniquities of the selfish and the tyranny of evil men. Blessed is he who, in the name of charity and good will, shepherds the weak through the valley of darkness, for he is truly his brother&#8217;s keeper and the finder of lost children. And I will strike down upon thee with great vengeance and furious anger those who would attempt to poison and destroy My brothers. And you will know My name is the Lord when I lay My vengeance upon thee.</p>

<p>Your bones don&#8217;t break, mine do. That&#8217;s clear. Your cells react to bacteria and viruses differently than mine. You don&#8217;t get sick, I do. That&#8217;s also clear. But for some reason, you and I react the exact same way to water. We swallow it too fast, we choke. We get some in our lungs, we drown. However unreal it may seem, we are connected, you and I. We&#8217;re on the same curve, just on opposite ends.</p>

<p>Do you see any Teletubbies in here? Do you see a slender plastic tag clipped to my shirt with my name printed on it? Do you see a little Asian child with a blank expression on his face sitting outside on a mechanical helicopter that shakes when you put quarters in it? No? Well, that&#8217;s what you see at a toy store. And you must think you&#8217;re in a toy store, because you&#8217;re here shopping for an infant named Jeb.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro]]></title>
    <link href="http://jrowdev.com/blog/2012/07/22/intro/"/>
    <updated>2012-07-22T08:23:00-04:00</updated>
    <id>http://jrowdev.com/blog/2012/07/22/intro</id>
    <content type="html"><![CDATA[<p>Testing!</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin, massa eu vestibulum laoreet, nibh ante vulputate lorem, ac lobortis ante tellus eu mi. Duis sem nisi, luctus at feugiat eget, fringilla ut tellus. Nam a molestie justo. Sed pulvinar est vitae tellus semper tincidunt. Fusce euismod luctus lacus nec placerat. Mauris rutrum scelerisque nulla ut tempor. Nunc porttitor posuere mi, aliquet vehicula lorem feugiat in. Ut ut fermentum risus. Aliquam tincidunt ultricies ante sit amet bibendum. Cras nec sapien odio. Duis posuere congue sem, at congue massa faucibus at.</p>

<p>Integer ut sapien eget nisl auctor faucibus ut fermentum arcu. Nunc rutrum urna non risus congue et tristique felis eleifend. Maecenas blandit est eu mauris aliquam aliquet. Quisque porttitor enim eget risus blandit in mollis orci eleifend. Nam malesuada nulla sed lacus elementum placerat accumsan arcu rhoncus. Phasellus feugiat cursus turpis nec facilisis. Duis eget metus arcu, eget commodo velit. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer cursus vulputate enim, vel gravida velit faucibus et. Ut a urna vitae tellus cursus rhoncus. Maecenas at odio eget quam cursus elementum. Aliquam vitae eros quis tellus laoreet accumsan sed id lorem. Suspendisse et rutrum leo. Integer scelerisque vestibulum adipiscing. In posuere, libero ac accumsan suscipit, nulla ligula gravida erat, ut tempor odio erat nec sem. Quisque justo ipsum, adipiscing volutpat varius vitae, blandit eget nisi.</p>

<p>Nullam adipiscing neque ac lacus commodo vitae imperdiet dui sollicitudin. Ut ac nunc augue. Nam at sem ut quam commodo aliquet vitae vitae dui. Vivamus scelerisque felis eget dolor cursus feugiat. Phasellus at dui sed lectus scelerisque pretium. Etiam nec massa ut justo vestibulum fringilla ac vitae urna. Morbi tortor erat, tempus sed consectetur at, elementum nec eros. Vivamus mattis arcu a sapien semper non lacinia eros pretium.</p>

<p>Proin ut hendrerit arcu. Maecenas ullamcorper tristique magna vel mattis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam tincidunt euismod viverra. In sit amet neque turpis. Suspendisse ac sapien mi, id blandit purus. Ut tortor turpis, rutrum ac tempor at, accumsan sit amet erat. Etiam ultricies eleifend dolor, eget tempus justo tristique vitae. In hac habitasse platea dictumst. Aliquam eu enim neque.</p>

<p>Morbi massa lorem, viverra non dictum at, malesuada vel nibh. Nam fermentum lobortis varius. Sed a nulla lacus, quis posuere risus. Nunc id urna libero, quis rutrum mi. In gravida felis urna. Praesent nec dolor ac urna tempor fermentum. Curabitur rutrum arcu et lorem volutpat viverra.</p>
]]></content>
  </entry>
  
</feed>
