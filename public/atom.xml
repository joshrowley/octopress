<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Free Play]]></title>
  <link href="http://jrowdev.com//atom.xml" rel="self"/>
  <link href="http://jrowdev.com//"/>
  <updated>2012-10-10T10:14:19-04:00</updated>
  <id>http://jrowdev.com//</id>
  <author>
    <name><![CDATA[Josh Rowley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips for Solo GitHubbers: How to Code with People for the First Time]]></title>
    <link href="http://jrowdev.com//blog/2012/10/09/tips-for-solo-githubbers-how-to-code-with-people-for-the-first-time/"/>
    <updated>2012-10-09T19:43:00-04:00</updated>
    <id>http://jrowdev.com//blog/2012/10/09/tips-for-solo-githubbers-how-to-code-with-people-for-the-first-time</id>
    <content type="html"><![CDATA[<p><img src="http://jrowdev.com//images/git_collaboration.jpg" alt="Coding Together" />
Photo by <a href="http://www.flickr.com/photos/hackny/6890140478/">hackNY</a></p>

<p>I used Git collaboratively for the first time exactly one week ago on Day 1 of Flatiron School. It wasn&#8217;t pretty, you can read a little about it in my first post.</p>

<p>I had some experience using Git while doing Michael Hartl&#8217;s Rails Tutorial in my spare time, but I had never used it with other people. Git is very simple when it&#8217;s just you. I was pretty much only doing commits and pushing to the remote, with the occasional branch.</p>

<p>This is one of the biggest limitations facing beginners trying to learn how to become professional developers on their own, whether through books or online resources. You must learn how to use Git with other people! That much is very apparent from my first week at Flatiron. If a coding academy isn&#8217;t an option for you, find a Meetup for beginners. Convince your friends to learn it with you. Find somebody.</p>

<p>Once you got your collaborators, here are some tips I&#8217;d like to share based on my first experience of being a newbie lone wolf Git user being thrown into my first group Git collaboration:</p>

<ol>
<li><p><em>Establish team&#8217;s workflow process and best practices first.</em> It&#8217;s really important that everyone understands conceptually how your repo is organized, and who should be committing where. Do not rush this step! If someone is a little shaky on the foundations, take the time to get them up to speed. Even someone with the best of intentions can cause havoc on the rest of the group&#8217;s work if they misunderstand your group&#8217;s workflow.</p></li>
<li><p><em>Make sure you&#8217;re working on the correct branch.</em> I pulled down the master branch, and created my own feature branch. However, at some point I checked out the master branch and didn&#8217;t notice. I lazily pushed to GitHub without specifying a specific branch (I assumed was in my feature branch), and as a result committed a major party foul by pushing to the master branch. If you&#8217;re making commits on the wrong branch, you&#8217;re setting yourself up for confusion when trying to merge feature branches together, or merging them back to master.</p></li>
<li><p><em>Do not run any commands if you don&#8217;t understand what it does.</em> Not only that, but do you understand its consequences in your specific context? I was super eager to get started with git. I didn&#8217;t remember everything, so I asked my fellow classmates about how to do this and that when I ran up against a wall. Or, I would try stumbling around with git commands until I got what I wanted. Do not do this! Git is not IRB! You can&#8217;t just play around with it. If you&#8217;re stuck, take as much time as you need to research and figure out what you need to do, or ask someone who would know. Otherwise, you can screw up your repo big time.</p></li>
<li><p><em>One mistake can proliferate exponentially into a huge mess.</em> Unfortunately, my only advice is to try to not make any mistakes, especially when merging, rebasing, pulling, and pushing. Take a moment to step back and doublecheck that you are using the correct command, in the correct branch, to the correct remote. Ask yourself, when I hit enter, what will this do? If you&#8217;re not 100%, don&#8217;t do it.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL: Schemin' with Schemas]]></title>
    <link href="http://jrowdev.com//blog/2012/10/04/sql-schemin-with-schemas/"/>
    <updated>2012-10-04T23:24:00-04:00</updated>
    <id>http://jrowdev.com//blog/2012/10/04/sql-schemin-with-schemas</id>
    <content type="html"><![CDATA[<p>Today was spent working on databases. I had a lot of fun writing SQL queries. We were tasked to create the schema for a simple quiz app. Here&#8217;s the schema:</p>

<pre>

CREATE table user (
    id INTEGER PRIMARY KEY,
    name TEXT
);

CREATE table quiz (
    id INTEGER PRIMARY KEY,
    name
);

CREATE table question (
    id INTEGER PRIMARY KEY,
    content TEXT,
    quiz_id INTEGER
);

CREATE table choice (
    id INTEGER PRIMARY KEY,
    content TEXT,
    correct BOOLEAN,
    question_id INTEGER
);

CREATE table answer (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    question_id INTEGER,
    choice_id INTEGER
);

</pre>


<p>With this schema, we had to write some queries and insert sample data. I pair programmed with Matt, and the last challenge was a bit tricky for us, but it was a fun challenge to complete. It feels really good to be learning so much so quickly.</p>

<p>Create a stats.sql that will show the percentage (if you want to try to use MATH functions within SQL) or the total right answers to each question. This will need to use joins too and might get complicated.</p>

<pre>

SELECT question.content, (COUNT (*) * 100.0) / (SELECT COUNT (*) FROM answer WHERE question_id = question.id)
FROM question
INNER JOIN choice
ON question.id = choice.question_id
INNER JOIN answer
ON question.id = answer.question_id
WHERE choice.correct = 1 AND
question.id = 1 AND
answer.choice_id = choice.id;

</pre>


<p>We then iterate through all the questions replacing the question.id value in the where clause. That outputs the following data with the percentage of responses that were correct:</p>

<pre>

How do you initialize a Git repository?|100.0
What git command stages changes?|50.0
How do you make a commit once changes are staged?|100.0
What command do you use to see whether there are any untracked files in your repository?|100.0
How do you create a new branch and switch to it with one line?|50.0
How do you create a table in SQL?|100.0
How do you remove a table in SQL?|50.0
How do you write a query that returns all rows from a table?|50.0
What is the difference between an inner join and an outer join?|50.0
How do you add a row to a table?|50.0

</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://jrowdev.com//blog/2012/10/04/hello-world/"/>
    <updated>2012-10-04T12:10:00-04:00</updated>
    <id>http://jrowdev.com//blog/2012/10/04/hello-world</id>
    <content type="html"><![CDATA[<p>Hi everyone, my name is Josh Rowley, and I’m a student at the newly created Flatiron School. It’s been two days since we started, and I’ve already felt that I’ve gained more understanding of web development in the past two days then any of the self study I did before I started in the months leading up to it.</p>

<p>The most helpful thing to have in order to learn how to code, at least for me, is to be working with a group with the same goals and mission as yourself. That’s what we have here at the school. It also allows us to work in more realistic environment. The benefits of learning in a team for a beginner cannot be understated. Everyone has different strengths and thought processes, and putting them together helps us solve the challenges of development in faster and newer ways.</p>

<p>Of course, working in the school has also presented its own challenges compared to self study. I thought I knew git pretty well from studying previously and working on my own projects, but I had never actually used it to collaborate on a project with anyone else.</p>

<p>Day one, Avi had us create profile pages for the school website with HTML and CSS. Sounds simple enough, but we were all going to do it at the same time using the same github repo, by forking and creating our own feature branches. At the end, we were going to merge all of our separate work back into the master branch.</p>

<p>We were divided into teams of four, and we started to plan our workflow and collaborate on how the HTML layouts and CSS styling would look like. We thought we had a handle on how git worked, but after a couple of hours, we had way too many branches with common files spread out across our disparate local git repos with different versions across all of them. It was a mess, and we realized that we were a bit ambitious for the first day.</p>

<p>It also showed me that the biggest thing that I’m going to learn here is being able to work as a team on software. Avi emphasized this point several times and it was quite obvious after our first day that that was the case. Being able to communicate and be on the same page for workflow and planning is critical and I’m excited to learn these skills here. It’s definitely something that cannot be learned on your own.</p>
]]></content>
  </entry>
  
</feed>
